package com.example.blogandroidapp.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.blogandroidapp.dao.Persons;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PERSONS.
*/
public class PersonsDao extends AbstractDao<Persons, Long> {

    public static final String TABLENAME = "PERSONS";

    /**
     * Properties of entity Persons.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PersonId = new Property(0, Long.class, "PersonId", true, "PERSON_ID");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property City = new Property(2, String.class, "City", false, "CITY");
    };


    public PersonsDao(DaoConfig config) {
        super(config);
    }
    
    public PersonsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PERSONS' (" + //
                "'PERSON_ID' INTEGER PRIMARY KEY ," + // 0: PersonId
                "'NAME' TEXT," + // 1: Name
                "'CITY' TEXT);"); // 2: City
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PERSONS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Persons entity) {
        stmt.clearBindings();
 
        Long PersonId = entity.getPersonId();
        if (PersonId != null) {
            stmt.bindLong(1, PersonId);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String City = entity.getCity();
        if (City != null) {
            stmt.bindString(3, City);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Persons readEntity(Cursor cursor, int offset) {
        Persons entity = new Persons( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // PersonId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // City
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Persons entity, int offset) {
        entity.setPersonId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Persons entity, long rowId) {
        entity.setPersonId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Persons entity) {
        if(entity != null) {
            return entity.getPersonId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
